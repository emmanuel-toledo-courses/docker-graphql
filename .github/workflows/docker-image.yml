name: Docker Image CI

on: # Contiene las condicionantes para detonar este action.
  push: # Se detona el action en el push de las ramas posteriores.
    branches: [ "main" ]
  pull_request:  # Se detona el action en el push_request de las ramas posteriores.
    branches: [ "main" ]

jobs: # Definimos los jobs (pasos) que llevara치 a cabo el action (pipeline)

  build: # Definimos un nombre a un job, en este caso 'build' (como el service de docker compose).

    runs-on: ubuntu-latest # Donde se va a ejecutar, en una instancia de ubuntu con paquetes necesarios instalados (por ejemplo docker).

    steps: # Pasos que se llevar치n a cabo en este job.
    
    - name: Checkout code
      uses: actions/checkout@v3 # 'Uses' necesarios, b치sicamente es un repositorio con configuraciones para poder trabajar el action como necesitemos.
      with:
        fetch-depth: 0

    - name: Docker Login
      env: # Declaramos variables
        DOCKER_USER: ${{ secrets.DOCKER_USER }} # Obtener variables de secret.
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: | # El usar el simbolo | significa que ejecutaremos comandos por separado.
        echo "Iniciando login..."
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
        echo "Fin del login!"

    
    # - name: Build the Docker image # Nombre del paso.
    #   run: docker build . --file Dockerfile --tag my-image-name:$(date +%s) # Comando que se ejecutar치 en el Pipeline.
